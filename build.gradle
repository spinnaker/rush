/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

buildscript {
  repositories {
    jcenter()
    maven { url "http://spinnaker.bintray.com/gradle" }
  }
  dependencies {
    classpath 'com.netflix.spinnaker.gradle:spinnaker-gradle-project:3.5.0'
    classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
  }
}

allprojects {
  apply plugin: "spinnaker.project"
  apply plugin: "groovy"
  apply plugin: "spring-boot"
  apply plugin: 'nebula.ospackage'

  spinnaker {
    dependenciesVersion = "0.19.0"
  }
  test {
    testLogging {
      exceptionFormat = 'full'
    }
  }

  group = "com.netflix.spinnaker.rush"

  configurations.all {
    exclude group: 'javax.servlet', module: 'servlet-api'
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.mortbay.jetty", module: "servlet-api"

    resolutionStrategy {
      force 'com.google.guava:guava:15.0'
    }
  }

  dependencies {
    spinnaker.group("test")
    spinnaker.group("bootWeb")
    spinnaker.group("retrofitDefault")
    compile spinnaker.dependency("groovy")
    compile spinnaker.dependency("kork")
    compile spinnaker.dependency("korkCassandra")
    compile spinnaker.dependency("korkSwagger")
    compile spinnaker.dependency("korkWeb")
    compile spinnaker.dependency("rxJava")
    compile spinnaker.dependency("clouddriverSecurity")

    compile 'org.apache.commons:commons-exec:1.3'
  }
}

jar {
  doFirst {
    exclude "rush.yml"
  }
}

applicationName = 'rush'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('src/main/resources')) {
  into "config"
}

startScripts {
  defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
  doLast {
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
        if [ -f /etc/default/spinnaker ]; then
          set -a
          . /etc/default/spinnaker
          set +a
        fi
        DEFAULT_JVM_OPTS='''.stripIndent())
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}


String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
  packageName = "spinnaker-" + project.applicationName
  version = toVers(project.version.toString())
  release '3'
  os = LINUX

  // installer scripts
  postInstall = file('pkg_scripts/postInstall.sh')
  postUninstall = file('pkg_scripts/postUninstall.sh')
  
  from "${project.buildDir}/install/${project.applicationName}"
    into "/opt/${project.applicationName}"

  from(file('etc/init/rush.conf')) {
    into('/etc/init')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

  from(file('etc/logrotate.d/rush')) {
    into('/etc/logrotate.d')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

}

buildDeb {
  dependsOn installDist
}

defaultTasks 'bootRun'
